{"version":3,"sources":["../react_components/PaginationBoxView.js"],"names":["PaginationBoxView","props","handlePreviousPage","selected","state","evt","preventDefault","returnValue","handlePageSelected","handleNextPage","pageCount","setState","callCallback","handleBreakClick","index","getForwardJump","getBackwardJump","selectedItem","onPageChange","pagination","items","pageRangeDisplayed","marginPagesDisplayed","breakLabel","breakClassName","push","getPageElement","leftSide","rightSide","page","breakView","createPageView","length","bind","initialPage","forcePage","disableInitialCallback","nextProps","forwardJump","backwardJump","pageIndex","hrefBuilder","pageClassName","pageLinkClassName","activeClassName","activeLinkClassName","extraAriaContext","disabledClassName","previousClassName","nextClassName","containerClassName","previousLinkClassName","previousLabel","nextLinkClassName","nextLabel","previousClasses","nextClasses","Component","propTypes","PropTypes","number","isRequired","node","oneOfType","string","func","bool","defaultProps"],"mappings":"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","file":"PaginationBoxView.js","sourcesContent":["'use strict';\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PageView from './PageView';\r\nimport BreakView from './BreakView';\r\n\r\n\r\nexport default class PaginationBoxView extends Component {\r\n  static propTypes = {\r\n    pageCount             : PropTypes.number.isRequired,\r\n    pageRangeDisplayed    : PropTypes.number.isRequired,\r\n    marginPagesDisplayed  : PropTypes.number.isRequired,\r\n    previousLabel         : PropTypes.node,\r\n    nextLabel             : PropTypes.node,\r\n    breakLabel            : PropTypes.oneOfType([\r\n                              PropTypes.string,\r\n                              PropTypes.node,\r\n                            ]),\r\n    hrefBuilder           : PropTypes.func,\r\n    onPageChange          : PropTypes.func,\r\n    initialPage           : PropTypes.number,\r\n    forcePage             : PropTypes.number,\r\n    disableInitialCallback: PropTypes.bool,\r\n    containerClassName    : PropTypes.string,\r\n    pageClassName         : PropTypes.string,\r\n    pageLinkClassName     : PropTypes.string,\r\n    activeClassName       : PropTypes.string,\r\n    activeLinkClassName   : PropTypes.string,\r\n    previousClassName     : PropTypes.string,\r\n    nextClassName         : PropTypes.string,\r\n    previousLinkClassName : PropTypes.string,\r\n    nextLinkClassName     : PropTypes.string,\r\n    disabledClassName     : PropTypes.string,\r\n    breakClassName        : PropTypes.string\r\n  };\r\n\r\n  static defaultProps = {\r\n    pageCount             : 10,\r\n    pageRangeDisplayed    : 2,\r\n    marginPagesDisplayed  : 3,\r\n    activeClassName       : \"selected\",\r\n    previousClassName     : \"previous\",\r\n    nextClassName         : \"next\",\r\n    previousLabel         : \"Previous\",\r\n    nextLabel             : \"Next\",\r\n    breakLabel            : \"...\",\r\n    disabledClassName     : \"disabled\",\r\n    disableInitialCallback: false\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selected: props.initialPage ? props.initialPage :\r\n                props.forcePage   ? props.forcePage :\r\n                0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { initialPage, disableInitialCallback } = this.props;\r\n    // Call the callback with the initialPage item:\r\n    if (typeof(initialPage) !== 'undefined' && !disableInitialCallback) {\r\n      this.callCallback(initialPage);\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (typeof(nextProps.forcePage) !== 'undefined' && this.props.forcePage !== nextProps.forcePage) {\r\n      this.setState({selected: nextProps.forcePage});\r\n    }\r\n  }\r\n\r\n  handlePreviousPage = evt => {\r\n    const { selected } = this.state;\r\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\r\n    if (selected > 0) {\r\n      this.handlePageSelected(selected - 1, evt);\r\n    }\r\n  };\r\n\r\n  handleNextPage = evt => {\r\n    const { selected } = this.state;\r\n    const { pageCount } = this.props;\r\n\r\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\r\n    if (selected < pageCount - 1) {\r\n      this.handlePageSelected(selected + 1, evt);\r\n    }\r\n  };\r\n\r\n  handlePageSelected = (selected, evt) => {\r\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\r\n\r\n    if (this.state.selected === selected) return;\r\n\r\n    this.setState({selected: selected});\r\n\r\n    // Call the callback with the new selected item:\r\n    this.callCallback(selected);\r\n  };\r\n\r\n  getForwardJump() {\r\n    const { selected } = this.state;\r\n    const { pageCount, pageRangeDisplayed } = this.props;\r\n\r\n    const forwardJump = selected + pageRangeDisplayed;\r\n    return forwardJump >= pageCount ? pageCount - 1 : forwardJump;\r\n  }\r\n\r\n  getBackwardJump() {\r\n    const { selected } = this.state;\r\n    const { pageRangeDisplayed } = this.props;\r\n\r\n    const backwardJump = selected - pageRangeDisplayed;\r\n    return backwardJump < 0 ? 0 : backwardJump;\r\n  }\r\n\r\n  handleBreakClick = (index, evt) => {\r\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\r\n\r\n    const { selected } = this.state;\r\n\r\n    this.handlePageSelected(\r\n      selected < index ?\r\n        this.getForwardJump() :\r\n        this.getBackwardJump(),\r\n      evt\r\n    );\r\n  }\r\n\r\n  hrefBuilder(pageIndex) {\r\n    const { hrefBuilder, pageCount } = this.props;\r\n    if (hrefBuilder &&\r\n      pageIndex !== this.state.selected &&\r\n      pageIndex >= 0 &&\r\n      pageIndex < pageCount\r\n    ) {\r\n      return hrefBuilder(pageIndex + 1);\r\n    }\r\n  }\r\n\r\n  callCallback = (selectedItem) => {\r\n    if (typeof(this.props.onPageChange) !== \"undefined\" &&\r\n        typeof(this.props.onPageChange) === \"function\") {\r\n      this.props.onPageChange({selected: selectedItem});\r\n    }\r\n  };\r\n\r\n  getPageElement(index) {\r\n    const { selected } = this.state;\r\n    const {\r\n      pageClassName,\r\n      pageLinkClassName,\r\n      activeClassName,\r\n      activeLinkClassName,\r\n      extraAriaContext\r\n    } = this.props;\r\n\r\n    return <PageView\r\n      key={index}\r\n      onClick={this.handlePageSelected.bind(null, index)}\r\n      selected={selected === index}\r\n      pageClassName={pageClassName}\r\n      pageLinkClassName={pageLinkClassName}\r\n      activeClassName={activeClassName}\r\n      activeLinkClassName={activeLinkClassName}\r\n      extraAriaContext={extraAriaContext}\r\n      href={this.hrefBuilder(index)}\r\n      page={index + 1} />\r\n  }\r\n\r\n  pagination = () => {\r\n    const items = [];\r\n    const {\r\n      pageRangeDisplayed,\r\n      pageCount,\r\n      marginPagesDisplayed,\r\n      breakLabel,\r\n      breakClassName\r\n    } = this.props;\r\n\r\n    const { selected } = this.state;\r\n\r\n    if (pageCount <= pageRangeDisplayed) {\r\n\r\n      for (let index = 0; index < pageCount; index++) {\r\n        items.push(this.getPageElement(index));\r\n      }\r\n\r\n    } else {\r\n\r\n      let leftSide  = (pageRangeDisplayed / 2);\r\n      let rightSide = (pageRangeDisplayed - leftSide);\r\n\r\n      // If the selected page index is on the default right side of the pagination,\r\n      // we consider that the new right side is made up of it (= only one break element).\r\n      // If the selected page index is on the default left side of the pagination,\r\n      // we consider that the new left side is made up of it (= only one break element).\r\n      if (selected > pageCount - pageRangeDisplayed / 2) {\r\n        rightSide = pageCount - selected;\r\n        leftSide  = pageRangeDisplayed - rightSide;\r\n      }\r\n      else if (selected < pageRangeDisplayed / 2) {\r\n        leftSide  = selected;\r\n        rightSide = pageRangeDisplayed - leftSide;\r\n      }\r\n\r\n      let index;\r\n      let page;\r\n      let breakView;\r\n      let createPageView = (index) => this.getPageElement(index);\r\n\r\n      for (index = 0; index < pageCount; index++) {\r\n\r\n        page = index + 1;\r\n\r\n        // If the page index is lower than the margin defined,\r\n        // the page has to be displayed on the left side of\r\n        // the pagination.\r\n        if (page <= marginPagesDisplayed) {\r\n          items.push(createPageView(index));\r\n          continue;\r\n        }\r\n\r\n        // If the page index is greater than the page count\r\n        // minus the margin defined, the page has to be\r\n        // displayed on the right side of the pagination.\r\n        if (page > pageCount - marginPagesDisplayed) {\r\n          items.push(createPageView(index));\r\n          continue;\r\n        }\r\n\r\n        // If the page index is near the selected page index\r\n        // and inside the defined range (pageRangeDisplayed)\r\n        // we have to display it (it will create the center\r\n        // part of the pagination).\r\n        if ((index >= selected - leftSide) && (index <= selected + rightSide)) {\r\n          items.push(createPageView(index));\r\n          continue;\r\n        }\r\n\r\n        // If the page index doesn't meet any of the conditions above,\r\n        // we check if the last item of the current \"items\" array\r\n        // is a break element. If not, we add a break element, else,\r\n        // we do nothing (because we don't want to display the page).\r\n        if (breakLabel && items[items.length - 1] !== breakView) {\r\n          breakView = (\r\n            <BreakView\r\n              key={index}\r\n              breakLabel={breakLabel}\r\n              breakClassName={breakClassName}\r\n              onClick={this.handleBreakClick.bind(null, index)}\r\n            />\r\n          );\r\n          items.push(breakView);\r\n        }\r\n      }\r\n    }\r\n\r\n    return items;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      disabledClassName,\r\n      previousClassName,\r\n      nextClassName,\r\n      pageCount,\r\n      containerClassName,\r\n      previousLinkClassName,\r\n      previousLabel,\r\n      nextLinkClassName,\r\n      nextLabel\r\n    } = this.props;\r\n\r\n    const { selected } = this.state;\r\n\r\n    const previousClasses = previousClassName + (selected === 0 ? ` ${disabledClassName}` : '');\r\n    const nextClasses = nextClassName + (selected === pageCount - 1 ? ` ${disabledClassName}` : '');\r\n\r\n    return (\r\n      <ul className={containerClassName}>\r\n        <li className={previousClasses}>\r\n          <a onClick={this.handlePreviousPage}\r\n             className={previousLinkClassName}\r\n             href={this.hrefBuilder(selected - 1)}\r\n             tabIndex=\"0\"\r\n             role=\"button\"\r\n             onKeyPress={this.handlePreviousPage}>\r\n            {previousLabel}\r\n          </a>\r\n        </li>\r\n\r\n        {this.pagination()}\r\n\r\n        <li className={nextClasses}>\r\n          <a onClick={this.handleNextPage}\r\n             className={nextLinkClassName}\r\n             href={this.hrefBuilder(selected + 1)}\r\n             tabIndex=\"0\"\r\n             role=\"button\"\r\n             onKeyPress={this.handleNextPage}>\r\n            {nextLabel}\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n};\r\n"]}